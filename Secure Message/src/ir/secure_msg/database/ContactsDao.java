package ir.secure_msg.database;

import ir.secure_msg.database.Contacts;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACTS.
*/
public class ContactsDao extends AbstractDao<Contacts, Long> {

    public static final String TABLENAME = "CONTACTS";

    /**
     * Properties of entity Contacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property FamiliName = new Property(2, String.class, "FamiliName", false, "FAMILI_NAME");
        public final static Property Number = new Property(3, String.class, "Number", false, "NUMBER");
        public final static Property LastText = new Property(4, String.class, "LastText", false, "LAST_TEXT");
        public final static Property KeyAddresss = new Property(5, String.class, "keyAddresss", false, "KEY_ADDRESSS");
    };

    private DaoSession daoSession;


    public ContactsDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACTS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: Name
                "'FAMILI_NAME' TEXT," + // 2: FamiliName
                "'NUMBER' TEXT," + // 3: Number
                "'LAST_TEXT' TEXT," + // 4: LastText
                "'KEY_ADDRESSS' TEXT);"); // 5: keyAddresss
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contacts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String FamiliName = entity.getFamiliName();
        if (FamiliName != null) {
            stmt.bindString(3, FamiliName);
        }
 
        String Number = entity.getNumber();
        if (Number != null) {
            stmt.bindString(4, Number);
        }
 
        String LastText = entity.getLastText();
        if (LastText != null) {
            stmt.bindString(5, LastText);
        }
 
        String keyAddresss = entity.getKeyAddresss();
        if (keyAddresss != null) {
            stmt.bindString(6, keyAddresss);
        }
    }

    @Override
    protected void attachEntity(Contacts entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contacts readEntity(Cursor cursor, int offset) {
        Contacts entity = new Contacts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FamiliName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LastText
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // keyAddresss
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contacts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFamiliName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeyAddresss(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contacts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contacts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
